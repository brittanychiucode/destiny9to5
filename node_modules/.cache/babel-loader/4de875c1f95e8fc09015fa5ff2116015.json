{"ast":null,"code":"import store from './reduxStore';\nimport * as ls from './localStorage'; // Bungie API access convenience methods\n// class BungieError extends Error {\n//   constructor(request) {\n//     super(request.Message);\n//     this.errorCode = request.ErrorCode;\n//     this.errorStatus = request.ErrorStatus;\n//   }\n// }\n\nasync function apiRequest(path, options = {}) {\n  const defaults = {\n    headers: {},\n    stats: false,\n    withAuth: false,\n    errors: {\n      hide: false\n    }\n  };\n  let tokens = ls.get('setting.auth');\n  const stats = options.stats || false;\n  options = { ...defaults,\n    ...options,\n    errors: { ...defaults.errors,\n      ...options.errors\n    }\n  };\n  options.headers['X-API-Key'] = process.env.REACT_APP_BUNGIE_API_KEY;\n\n  if (typeof options.body === 'string') {\n    options.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n  } else {\n    options.headers['Content-Type'] = 'application/json';\n    options.body = JSON.stringify(options.body);\n  }\n\n  if (tokens && options.withAuth && !options.headers.Authorization) {\n    let now = new Date().getTime() + 10000;\n    let then = new Date(tokens.access.expires).getTime();\n\n    if (now > then) {\n      await GetOAuthAccessToken(`grant_type=refresh_token&refresh_token=${tokens.refresh.value}`);\n      tokens = ls.get('setting.auth');\n      options.headers.Authorization = `Bearer ${tokens.access.value}`;\n    } else {\n      options.headers.Authorization = `Bearer ${tokens.access.value}`;\n    }\n  }\n\n  const request = await fetch(`https://${stats ? 'stats' : 'www'}.bungie.net${path}`, options).catch(e => {\n    if (!options.errors.hide) {\n      store.dispatch({\n        type: 'PUSH_NOTIFICATION',\n        payload: {\n          error: true,\n          date: new Date().toISOString(),\n          expiry: 86400000,\n          displayProperties: {\n            name: `HTTP error`,\n            description: `A network error occured. ${e.message}.`,\n            timeout: 4\n          }\n        }\n      });\n    }\n  });\n  const response = request && (await request.json());\n\n  if (response && response.ErrorCode && response.ErrorCode !== 1) {\n    if (!options.errors.hide) {\n      store.dispatch({\n        type: 'PUSH_NOTIFICATION',\n        payload: {\n          error: true,\n          date: new Date().toISOString(),\n          expiry: 86400000,\n          displayProperties: {\n            name: 'Bungie',\n            description: `${response.ErrorCode} ${response.ErrorStatus} ${response.Message}`,\n            timeout: 4\n          }\n        }\n      });\n    }\n\n    return response;\n  } else if (request && request.ok) {\n    if (path === '/Platform/App/OAuth/Token/') {\n      let now = new Date().getTime();\n      let memberships = await GetMembershipDataForCurrentUser(response.access_token);\n\n      if (memberships && memberships.ErrorCode === 1) {\n        const tokens = {\n          access: {\n            value: response.access_token,\n            expires: now + response.expires_in * 1000\n          },\n          refresh: {\n            value: response.refresh_token,\n            expires: now + response.refresh_expires_in * 1000\n          },\n          bnetMembershipId: response.membership_id,\n          destinyMemberships: memberships.Response.destinyMemberships\n        };\n        ls.set('setting.auth', tokens);\n        return response;\n      } else {\n        return false;\n      }\n    } else {\n      return response;\n    }\n  } else if (request) {\n    if (!options.errors.hide) {\n      store.dispatch({\n        type: 'PUSH_NOTIFICATION',\n        payload: {\n          error: true,\n          date: new Date().toISOString(),\n          expiry: 86400000,\n          displayProperties: {\n            name: `HTTP error`,\n            description: `Code ${request.status} A network error occured.`,\n            timeout: 4\n          }\n        }\n      });\n    }\n\n    return request;\n  } else {\n    return false;\n  }\n}\n\nexport const testBungie = () => {\n  return \"TRUE\";\n};\nexport const GetOAuthAccessToken = async (body) => apiRequest('/Platform/App/OAuth/Token/', {\n  method: 'post',\n  headers: {\n    Authorization: `Basic ${window.btoa(`${process.env.REACT_APP_BUNGIE_CLIENT_ID}:${process.env.REACT_APP_BUNGIE_CLIENT_SECRET}`)}`\n  },\n  body\n});\n_c = GetOAuthAccessToken;\nexport const GetMembershipDataForCurrentUser = async (access = false) => apiRequest('/Platform/User/GetMembershipsForCurrentUser/', {\n  withAuth: true,\n  headers: {\n    Authorization: access && `Bearer ${access}`\n  }\n});\n_c2 = GetMembershipDataForCurrentUser;\nexport const GetCharactersForCurrrentUser = () => {};\n_c3 = GetCharactersForCurrrentUser;\nexport const GetProfile = async (options) => apiRequest(`/Platform/Destiny2/${options.params.membershipType}/Profile/${options.params.membershipId}/?components=${options.params.components}`, options);\n_c4 = GetProfile;\nexport const EquipItem = async (body) => apiRequest(`/Platform/Destiny2/Actions/Items/EquipItem/`, {\n  withAuth: true,\n  method: 'post',\n  body\n});\n_c5 = EquipItem;\nexport const GetVendor = async (membershipType, membershipId, characterId, vendorHash, components) => apiRequest(`/Platform/Destiny2/${membershipType}/Profile/${membershipId}/Character/${characterId}/Vendors/${vendorHash}/?components=${components}`, {\n  withAuth: true\n});\n_c6 = GetVendor;\nexport const manifest = async version => fetch(`https://www.bungie.net${version}`).then(a => a.json());\nexport const GetDestinyManifest = async options => apiRequest('/Platform/Destiny2/Manifest/', options);\n_c7 = GetDestinyManifest;\nexport const GetCommonSettings = async options => apiRequest(`/Platform/Settings/`, options);\n_c8 = GetCommonSettings;\nexport const GetPublicMilestones = async () => apiRequest('/Platform/Destiny2/Milestones/');\n_c9 = GetPublicMilestones;\nexport const GetGroupsForMember = async options => apiRequest(`/Platform/GroupV2/User/${options.params.membershipType}/${options.params.membershipId}/0/1/`);\n_c10 = GetGroupsForMember;\nexport const GetGroupByName = async (groupName, groupType = 1) => apiRequest(`/Platform/GroupV2/Name/${encodeURIComponent(groupName)}/${groupType}/`);\n_c11 = GetGroupByName;\nexport const GetMembersOfGroup = async groupId => apiRequest(`/Platform/GroupV2/${groupId}/Members/`);\n_c12 = GetMembersOfGroup;\nexport const GetGroup = async groupId => apiRequest(`/Platform/GroupV2/${groupId}/`);\n_c13 = GetGroup;\nexport const GetClanWeeklyRewardState = async groupId => apiRequest(`/Platform/Destiny2/Clan/${groupId}/WeeklyRewardState/`);\n_c14 = GetClanWeeklyRewardState;\nexport const GetHistoricalStats = async (membershipType, membershipId, characterId = '0', groups, modes, periodType) => apiRequest(`/Platform/Destiny2/${membershipType}/Account/${membershipId}/Character/0/Stats/?groups=${groups}&modes=${modes}&periodType=${periodType}`);\n_c15 = GetHistoricalStats;\nexport const SearchDestinyPlayer = async (membershipType, displayName) => apiRequest(`/Platform/Destiny2/SearchDestinyPlayer/${membershipType}/${encodeURIComponent(displayName)}/`);\n_c16 = SearchDestinyPlayer;\nexport const GetActivityHistory = async (membershipType, membershipId, characterId, count, mode = false, page) => apiRequest(`/Platform/Destiny2/${membershipType}/Account/${membershipId}/Character/${characterId}/Stats/Activities/?page=${page}${mode ? `&mode=${mode}` : ''}&count=${count}`);\n_c17 = GetActivityHistory;\nexport const PGCR = async id => apiRequest(`/Platform/Destiny2/Stats/PostGameCarnageReport/${id}/`, {\n  stats: true\n});\n_c18 = PGCR;\nexport const GetTrendingCategories = async () => apiRequest(`/Platform/Trending/Categories/`);\n_c19 = GetTrendingCategories;\nexport const GetTrendingEntryDetail = async (trendingEntryType, identifier) => apiRequest(`/Platform/Trending/Details/${trendingEntryType}/${identifier}/`);\n_c20 = GetTrendingEntryDetail;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20;\n\n$RefreshReg$(_c, \"GetOAuthAccessToken\");\n$RefreshReg$(_c2, \"GetMembershipDataForCurrentUser\");\n$RefreshReg$(_c3, \"GetCharactersForCurrrentUser\");\n$RefreshReg$(_c4, \"GetProfile\");\n$RefreshReg$(_c5, \"EquipItem\");\n$RefreshReg$(_c6, \"GetVendor\");\n$RefreshReg$(_c7, \"GetDestinyManifest\");\n$RefreshReg$(_c8, \"GetCommonSettings\");\n$RefreshReg$(_c9, \"GetPublicMilestones\");\n$RefreshReg$(_c10, \"GetGroupsForMember\");\n$RefreshReg$(_c11, \"GetGroupByName\");\n$RefreshReg$(_c12, \"GetMembersOfGroup\");\n$RefreshReg$(_c13, \"GetGroup\");\n$RefreshReg$(_c14, \"GetClanWeeklyRewardState\");\n$RefreshReg$(_c15, \"GetHistoricalStats\");\n$RefreshReg$(_c16, \"SearchDestinyPlayer\");\n$RefreshReg$(_c17, \"GetActivityHistory\");\n$RefreshReg$(_c18, \"PGCR\");\n$RefreshReg$(_c19, \"GetTrendingCategories\");\n$RefreshReg$(_c20, \"GetTrendingEntryDetail\");","map":{"version":3,"sources":["D:/CodeProjects/github/destiny9to5/src/utils/bungie.js"],"names":["store","ls","apiRequest","path","options","defaults","headers","stats","withAuth","errors","hide","tokens","get","process","env","REACT_APP_BUNGIE_API_KEY","body","JSON","stringify","Authorization","now","Date","getTime","then","access","expires","GetOAuthAccessToken","refresh","value","request","fetch","catch","e","dispatch","type","payload","error","date","toISOString","expiry","displayProperties","name","description","message","timeout","response","json","ErrorCode","ErrorStatus","Message","ok","memberships","GetMembershipDataForCurrentUser","access_token","expires_in","refresh_token","refresh_expires_in","bnetMembershipId","membership_id","destinyMemberships","Response","set","status","testBungie","method","window","btoa","REACT_APP_BUNGIE_CLIENT_ID","REACT_APP_BUNGIE_CLIENT_SECRET","GetCharactersForCurrrentUser","GetProfile","params","membershipType","membershipId","components","EquipItem","GetVendor","characterId","vendorHash","manifest","version","a","GetDestinyManifest","GetCommonSettings","GetPublicMilestones","GetGroupsForMember","GetGroupByName","groupName","groupType","encodeURIComponent","GetMembersOfGroup","groupId","GetGroup","GetClanWeeklyRewardState","GetHistoricalStats","groups","modes","periodType","SearchDestinyPlayer","displayName","GetActivityHistory","count","mode","page","PGCR","id","GetTrendingCategories","GetTrendingEntryDetail","trendingEntryType","identifier"],"mappings":"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","sourcesContent":["import store from './reduxStore';\r\nimport * as ls from './localStorage';\r\n\r\n// Bungie API access convenience methods\r\n\r\n// class BungieError extends Error {\r\n//   constructor(request) {\r\n//     super(request.Message);\r\n\r\n//     this.errorCode = request.ErrorCode;\r\n//     this.errorStatus = request.ErrorStatus;\r\n//   }\r\n// }\r\n\r\nasync function apiRequest(path, options = {}) {\r\n  const defaults = {\r\n    headers: {},\r\n    stats: false,\r\n    withAuth: false,\r\n    errors: {\r\n      hide: false\r\n    }\r\n  };\r\n\r\n  let tokens = ls.get('setting.auth');\r\n\r\n  const stats = options.stats || false;\r\n  options = {\r\n    ...defaults,\r\n    ...options,\r\n    errors: {\r\n      ...defaults.errors,\r\n      ...options.errors\r\n    }\r\n  };\r\n\r\n  options.headers['X-API-Key'] = process.env.REACT_APP_BUNGIE_API_KEY;\r\n\r\n  if (typeof options.body === 'string') {\r\n    options.headers['Content-Type'] = 'application/x-www-form-urlencoded';\r\n  } else {\r\n    options.headers['Content-Type'] = 'application/json';\r\n    options.body = JSON.stringify(options.body);\r\n  }\r\n\r\n  if (tokens && options.withAuth && !options.headers.Authorization) {\r\n    let now = new Date().getTime() + 10000;\r\n    let then = new Date(tokens.access.expires).getTime();\r\n\r\n    if (now > then) {\r\n      await GetOAuthAccessToken(`grant_type=refresh_token&refresh_token=${tokens.refresh.value}`);\r\n\r\n      tokens = ls.get('setting.auth');\r\n\r\n      options.headers.Authorization = `Bearer ${tokens.access.value}`;\r\n    } else {\r\n      options.headers.Authorization = `Bearer ${tokens.access.value}`;\r\n    }\r\n  }\r\n\r\n  const request = await fetch(`https://${stats ? 'stats' : 'www'}.bungie.net${path}`, options)\r\n    .catch(e => {\r\n      if (!options.errors.hide) {\r\n        store.dispatch({\r\n          type: 'PUSH_NOTIFICATION',\r\n          payload: {\r\n            error: true,\r\n            date: new Date().toISOString(),\r\n            expiry: 86400000,\r\n            displayProperties: {\r\n              name: `HTTP error`,\r\n              description: `A network error occured. ${e.message}.`,\r\n              timeout: 4\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n  const response = request && await request.json();\r\n\r\n  if (response && response.ErrorCode && response.ErrorCode !== 1) {\r\n    if (!options.errors.hide) {\r\n      store.dispatch({\r\n        type: 'PUSH_NOTIFICATION',\r\n        payload: {\r\n          error: true,\r\n          date: new Date().toISOString(),\r\n          expiry: 86400000,\r\n          displayProperties: {\r\n            name: 'Bungie',\r\n            description: `${response.ErrorCode} ${response.ErrorStatus} ${response.Message}`,\r\n            timeout: 4\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    return response;\r\n  } else if (request && request.ok) {\r\n    if (path === '/Platform/App/OAuth/Token/') {\r\n      let now = new Date().getTime();\r\n\r\n      let memberships = await GetMembershipDataForCurrentUser(response.access_token);\r\n\r\n      if (memberships && memberships.ErrorCode === 1) {\r\n        const tokens = {\r\n          access: {\r\n            value: response.access_token,\r\n            expires: now + response.expires_in * 1000\r\n          },\r\n          refresh: {\r\n            value: response.refresh_token,\r\n            expires: now + response.refresh_expires_in * 1000\r\n          },\r\n          bnetMembershipId: response.membership_id,\r\n          destinyMemberships: memberships.Response.destinyMemberships\r\n        };\r\n\r\n        ls.set('setting.auth', tokens);\r\n\r\n        return response;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      return response;\r\n    }\r\n  } else if (request) {\r\n    if (!options.errors.hide) {\r\n      store.dispatch({\r\n        type: 'PUSH_NOTIFICATION',\r\n        payload: {\r\n          error: true,\r\n          date: new Date().toISOString(),\r\n          expiry: 86400000,\r\n          displayProperties: {\r\n            name: `HTTP error`,\r\n            description: `Code ${request.status} A network error occured.`,\r\n            timeout: 4\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    return request;\r\n  } else {\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\nexport const testBungie = () => {\r\n  return \"TRUE\";\r\n};\r\n\r\nexport const GetOAuthAccessToken = async body =>\r\n  apiRequest('/Platform/App/OAuth/Token/', {\r\n    method: 'post',\r\n    headers: {\r\n      Authorization: `Basic ${window.btoa(`${process.env.REACT_APP_BUNGIE_CLIENT_ID}:${process.env.REACT_APP_BUNGIE_CLIENT_SECRET}`)}`\r\n    },\r\n    body\r\n  });\r\n\r\nexport const GetMembershipDataForCurrentUser = async (access = false) =>\r\n  apiRequest('/Platform/User/GetMembershipsForCurrentUser/', {\r\n    withAuth: true,\r\n    headers: {\r\n      Authorization: access && `Bearer ${access}`\r\n    }\r\n  });\r\n\r\nexport const GetCharactersForCurrrentUser = () => {\r\n  \r\n}\r\n\r\nexport const GetProfile = async options =>\r\n  apiRequest(`/Platform/Destiny2/${options.params.membershipType}/Profile/${options.params.membershipId}/?components=${options.params.components}`, options);\r\n\r\nexport const EquipItem = async body =>\r\n  apiRequest(`/Platform/Destiny2/Actions/Items/EquipItem/`, {\r\n    withAuth: true,\r\n    method: 'post',\r\n    body\r\n  });\r\n\r\nexport const GetVendor = async (membershipType, membershipId, characterId, vendorHash, components) =>\r\n  apiRequest(`/Platform/Destiny2/${membershipType}/Profile/${membershipId}/Character/${characterId}/Vendors/${vendorHash}/?components=${components}`, {\r\n    withAuth: true\r\n  });\r\n\r\nexport const manifest = async version => fetch(`https://www.bungie.net${version}`).then(a => a.json());\r\n\r\nexport const GetDestinyManifest = async options => apiRequest('/Platform/Destiny2/Manifest/', options);\r\n\r\nexport const GetCommonSettings = async options => apiRequest(`/Platform/Settings/`, options);\r\n\r\nexport const GetPublicMilestones = async () => apiRequest('/Platform/Destiny2/Milestones/');\r\n\r\nexport const GetGroupsForMember = async options => apiRequest(`/Platform/GroupV2/User/${options.params.membershipType}/${options.params.membershipId}/0/1/`);\r\n\r\nexport const GetGroupByName = async (groupName, groupType = 1) => apiRequest(`/Platform/GroupV2/Name/${encodeURIComponent(groupName)}/${groupType}/`);\r\n\r\nexport const GetMembersOfGroup = async groupId => apiRequest(`/Platform/GroupV2/${groupId}/Members/`);\r\n\r\nexport const GetGroup = async groupId => apiRequest(`/Platform/GroupV2/${groupId}/`);\r\n\r\nexport const GetClanWeeklyRewardState = async groupId => apiRequest(`/Platform/Destiny2/Clan/${groupId}/WeeklyRewardState/`);\r\n\r\nexport const GetHistoricalStats = async (membershipType, membershipId, characterId = '0', groups, modes, periodType) => apiRequest(`/Platform/Destiny2/${membershipType}/Account/${membershipId}/Character/0/Stats/?groups=${groups}&modes=${modes}&periodType=${periodType}`);\r\n\r\nexport const SearchDestinyPlayer = async (membershipType, displayName) => apiRequest(`/Platform/Destiny2/SearchDestinyPlayer/${membershipType}/${encodeURIComponent(displayName)}/`);\r\n\r\nexport const GetActivityHistory = async (membershipType, membershipId, characterId, count, mode = false, page) => apiRequest(`/Platform/Destiny2/${membershipType}/Account/${membershipId}/Character/${characterId}/Stats/Activities/?page=${page}${mode ? `&mode=${mode}` : ''}&count=${count}`);\r\n\r\nexport const PGCR = async id => apiRequest(`/Platform/Destiny2/Stats/PostGameCarnageReport/${id}/`, { stats: true });\r\n\r\nexport const GetTrendingCategories = async () => apiRequest(`/Platform/Trending/Categories/`);\r\n\r\nexport const GetTrendingEntryDetail = async (trendingEntryType, identifier) => apiRequest(`/Platform/Trending/Details/${trendingEntryType}/${identifier}/`);\r\n"]},"metadata":{},"sourceType":"module"}